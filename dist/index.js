import * as rrweb from 'rrweb';
import { record } from 'rrweb';
import 'pako';

const kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
const kRequire = kIsNodeJS ? module.require : null; // eslint-disable-line

function createBase64WorkerFactory(base64, sourcemap = null) {
    const source = kIsNodeJS ? Buffer.from(base64, 'base64').toString('ascii') : atob(base64);
    const start = source.indexOf('\n', 10) + 1;
    const body = source.substring(start) + (sourcemap ? `//# sourceMappingURL=${sourcemap}` : '');

    if (kIsNodeJS) {
        /* node.js */
        const Worker = kRequire('worker_threads').Worker; // eslint-disable-line
        return function WorkerFactory(options) {
            return new Worker(body, Object.assign({}, options, { eval: true }));
        };
    }

    /* browser */
    const blob = new Blob([body], { type: 'application/javascript' });
    const url = URL.createObjectURL(blob);
    return function WorkerFactory(options) {
        return new Worker(url, options);
    };
}

/* eslint-disable */
const WorkerFactory = createBase64WorkerFactory('', null);
/* eslint-enable */

const init = function() {
    
};

class TxRRweb {

    init() {
        this.events = [];
        console.log('哈哈哈哈');
        this.worker = new WorkerFactory();
        console.log('worker:', this.worker);
        this.startRecord();
    }

    startRecord() {
        console.log('rrweb:', rrweb);
        const vm = this;
        record({
            emit(event, checkout) {
                // 用任意方式存储 event
                console.log('event:', vm.events);
                vm.events.push(event);
                console.log('isCheckout:', checkout);
                if(checkout) {
                    vm.save();
                }
            },
            checkoutEveryNms: 1000 * 30 * 1,
        });
    }

    save() {
        console.time('compressData:');
        var compressData = JSON.stringify(this.events);
        console.timeEnd('compressData:');
        console.time('compress time:');
        
       // const result = unzip(compressData);
        const logData = {id: new Date().getTime(), system: '123', logDetail: compressData, creator: '默翁', createTime: new Date().getTime()};

        this.worker.postMessage({
            secretKey: this.secretKey, 
            publicKey: this.publicKey, 
            event: compressData, 
            createTime: new Date().getTime(),
            userId: '123456',
            appId: '123456',
        });
        //indexDB.add({id: new Date().getTime(), system: '123', logDetail: compressData, creator: '默翁', createTime: formateDate(new Date(), "yyyy-MM-dd hh:mm:ss")});
        //
        var localStorage = window.localStorage;
        this.events = [];
    }
    
    
}


// export const init = function() {
//     console.log('呵呵呵')
// }

//export default { init: init }

export default TxRRweb;
export { init };
